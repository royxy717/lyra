import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

/**
 * 3D顶面柱状图效果
 * 基于原PillarEffect实现，但只使用顶面
 */
export class TopFacePillarEffect {
  public scene: THREE.Scene;
  public camera: THREE.PerspectiveCamera;
  public renderer: THREE.WebGLRenderer;
  private grid: THREE.Group;
  private topFaces: THREE.Mesh[][];
  private glowEffects: THREE.Sprite[][];
  
  private pillarHeights: number[][];
  private prevHeight: number[][];
  private prevDeltaZ: number[][];
  private beatHistory: number[];
  
  private gridSize: number = 2;
  private gridDimension: number = 20;
  private maxGlowIntensity: number = 2.0;
  private glowThreshold: number = 0.7;
  
  private animationId: number | null = null;
  private isInitialized: boolean = false;
  private isSilent: boolean = true;
  private silenceTimer: number = 0;
  private silenceThreshold: number = 30; // 静音检测阈值
  
  // 网页背景色 - 深蓝色
  private readonly backgroundColor: number = 0x171923;
  
  constructor(private container: HTMLElement) {
    console.log('正在创建TopFacePillarEffect实例');
    console.log('容器大小:', container.clientWidth, container.clientHeight);
    
    // 创建场景
    this.scene = new THREE.Scene();
    
    // 设置背景色为透明，与网页背景颜色一致
    this.scene.background = null;
    
    // 创建相机 - 使用更适合消隐测试的视角
    this.camera = new THREE.PerspectiveCamera(45, 1, 1, 1000);
    
    // 调整相机位置，使视角正确且内容居中
    this.camera.position.set(0, -70, 80); // 增加相机高度，使视角更高
    this.camera.up.set(0, 0, 1);  // Z轴向上
    this.camera.lookAt(0, 0, 0);  // 看向中心点
    
    // 检查并清理容器中已有的canvas元素
    const existingCanvas = container.querySelector('canvas');
    if (existingCanvas) {
      console.log('移除现有的canvas元素');
      container.removeChild(existingCanvas);
    }
    
    console.log('创建渲染器');
    // 创建渲染器 - 强化深度测试
    this.renderer = new THREE.WebGLRenderer({
      antialias: true,
      alpha: true,  // 启用透明背景
      logarithmicDepthBuffer: true // 提高深度测试精度
    });
    
    // 设置像素比和尺寸
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.setSize(container.clientWidth, container.clientHeight);
    
    // 激活深度测试
    this.renderer.setClearColor(0x000000, 0);
    this.renderer.autoClear = true;
    this.renderer.sortObjects = true;
    
    // 移除所有边框
    this.renderer.domElement.style.outline = 'none';
    this.renderer.domElement.style.border = 'none';
    
    // 添加到容器
    this.container.appendChild(this.renderer.domElement);
    
    // 检查canvas是否成功添加
    const canvasCheck = container.querySelector('canvas');
    console.log('Canvas检查:', canvasCheck ? '存在' : '不存在');
    
    // 创建网格组 - 不再旋转，保持水平
    this.grid = new THREE.Group();
    // 不再旋转网格，保持XY平面为水平面
    this.scene.add(this.grid);
    
    // 初始化其他参数
    this.gridSize = 2;
    this.gridDimension = 40;
    
    // 添加环境光提高可视性
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    this.scene.add(ambientLight);
    
    // 初始化数组
    this.topFaces = Array(this.gridDimension).fill(null).map(() => Array(this.gridDimension).fill(null));
    this.glowEffects = Array(this.gridDimension).fill(null).map(() => Array(this.gridDimension).fill(null));
    
    this.pillarHeights = Array(this.gridDimension).fill(null).map(() => Array(this.gridDimension).fill(0.01));
    this.prevHeight = Array(this.gridDimension).fill(null).map(() => Array(this.gridDimension).fill(0));
    this.prevDeltaZ = Array(this.gridDimension).fill(null).map(() => Array(this.gridDimension).fill(0));
    
    // 初始化节拍历史
    this.beatHistory = Array(this.gridDimension).fill(0);
    
    // 添加窗口大小变化事件监听器
    window.addEventListener('resize', this.onWindowResize.bind(this));
    
    console.log('TopFacePillarEffect构造完成');
    
    // 初始渲染一次，确保场景可见
    this.renderer.render(this.scene, this.camera);
  }
  
  /**
   * 初始化Three.js场景和对象
   */
  initialize(): void {
    if (this.isInitialized) return;
    
    try {
      console.log('初始化TopFacePillarEffect');
      
      // 创建场景
      this.scene = new THREE.Scene();
      this.scene.background = new THREE.Color(this.backgroundColor);
      
      // 创建相机
      this.camera = new THREE.PerspectiveCamera(
        45, 
        this.container.clientWidth / this.container.clientHeight, 
        0.1, 
        1000
      );
      this.camera.position.set(0, -30, 20);
      this.camera.lookAt(0, 0, 0);
      
      // 创建渲染器
      this.renderer = new THREE.WebGLRenderer({ antialias: true });
      this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);
      this.renderer.setPixelRatio(window.devicePixelRatio);
      this.container.appendChild(this.renderer.domElement);
      
      // 创建网格组
      this.grid = new THREE.Group();
      this.scene.add(this.grid);
      
      // 初始化数组
      this.topFaces = [];
      this.glowEffects = [];
      this.pillarHeights = [];
      this.prevHeight = [];
      this.prevDeltaZ = [];
      this.beatHistory = new Array(10).fill(0);
      
      // 计算核心区域的范围 (中心20x20)
      const coreSize = 20;
      const halfCore = coreSize / 2;
      const centerIndex = Math.floor(this.gridDimension / 2);
      const coreStartIndex = centerIndex - halfCore;
      const coreEndIndex = centerIndex + halfCore;
      
      // 初始化高度数组
      for (let i = 0; i < this.gridDimension; i++) {
        this.topFaces[i] = [];
        this.glowEffects[i] = [];
        this.pillarHeights[i] = [];
        this.prevHeight[i] = [];
        this.prevDeltaZ[i] = [];
      }
      
      // 创建发光纹理
      const glowTexture = this.createGlowTexture();
      
      // 创建核心区域的柱体
      for (let i = coreStartIndex; i < coreEndIndex; i++) {
        for (let j = coreStartIndex; j < coreEndIndex; j++) {
          // 创建柱体
          const pillar = new THREE.Group();
          
          // 设置柱体位置
          pillar.position.set(
            (i - this.gridDimension / 2) * this.gridSize,
            (j - this.gridDimension / 2) * this.gridSize,
            0
          );
          
          // 创建柱体几何体
          const geometry = new THREE.BoxGeometry(this.gridSize * 0.9, this.gridSize * 0.9, this.gridSize);
          
          // 创建材质
          const material = new THREE.MeshBasicMaterial({
            color: 0x444444,
            wireframe: true
          });
          
          // 创建网格
          const mesh = new THREE.Mesh(geometry, material);
          
          // 将网格添加到柱体
          pillar.add(mesh);
          
          // 创建顶面
          const topGeometry = new THREE.PlaneGeometry(this.gridSize * 0.9, this.gridSize * 0.9);
          const topMaterial = new THREE.MeshBasicMaterial({
            color: 0x00ff00,
            side: THREE.DoubleSide
          });
          const topMesh = new THREE.Mesh(topGeometry, topMaterial);
          
          // 旋转顶面使其水平
          topMesh.rotation.x = Math.PI / 2;
          
          // 设置顶面位置
          topMesh.position.z = 0;
          
          // 将顶面添加到柱体
          pillar.add(topMesh);
          
          // 保存顶面引用
          this.topFaces[i][j] = topMesh;
          
          // 初始化高度
          this.pillarHeights[i][j] = 0;
          this.prevHeight[i][j] = 0;
          this.prevDeltaZ[i][j] = 0;
          
          // 创建发光效果
          const glowMaterial = new THREE.SpriteMaterial({
            map: glowTexture,
            color: 0x00ff00,
            transparent: true,
            opacity: 0
          });
          const glowSprite = new THREE.Sprite(glowMaterial);
          glowSprite.scale.set(this.gridSize * 2, this.gridSize * 2, 1);
          glowSprite.position.z = this.gridSize / 2;
          pillar.add(glowSprite);
          
          // 保存发光效果引用
          this.glowEffects[i][j] = glowSprite;
          
          // 将柱体添加到网格
          this.grid.add(pillar);
        }
      }
      
      // 标记为已初始化
      this.isInitialized = true;
      
      // 添加轨道控制器
      const controls = new OrbitControls(this.camera, this.renderer.domElement);
      controls.enableDamping = true;
      controls.dampingFactor = 0.05;
      // 设置控制器的目标点为场景中心
      controls.target.set(0, 0, 0);
      // 更新控制器
      controls.update();
      
      console.log('音频可视化效果初始化完成');
    } catch (error) {
      console.error('初始化音频可视化效果时出错:', error);
    }
  }
  
  /**
   * 创建光晕纹理
   */
  private createGlowTexture(): THREE.Texture {
    const canvas = document.createElement('canvas');
    canvas.width = 64;
    canvas.height = 64;
    
    const context = canvas.getContext('2d');
    if (!context) throw new Error('无法创建2D上下文');
    
    // 创建径向渐变
    const gradient = context.createRadialGradient(
      32, 32, 0,
      32, 32, 32
    );
    
    gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
    gradient.addColorStop(0.3, 'rgba(255, 255, 255, 0.5)');
    gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
    
    // 填充渐变
    context.fillStyle = gradient;
    context.fillRect(0, 0, 64, 64);
    
    // 创建纹理
    const texture = new THREE.CanvasTexture(canvas);
    texture.needsUpdate = true;
    
    return texture;
  }
  
  /**
   * 设置指定位置柱体的高度
   * @param i X坐标
   * @param j Y坐标
   * @param height 高度值（0-1）
   */
  private setPillarHeight(i: number, j: number, height: number): void {
    if (!this.isInitialized) return;
    
    try {
      // 更新高度记录
      this.prevHeight[i][j] = height;
      this.pillarHeights[i][j] = height;
      
      // 计算实际高度值（乘以比例因子）
      const actualHeight = height * this.gridSize;
      
      // 获取柱体顶面
      const topFace = this.topFaces[i][j];
      
      // 设置顶面位置
      if (topFace) {
        // 计算新的位置
        const newZ = actualHeight / 2;
        
        // 计算Z轴变化量
        const deltaZ = newZ - (topFace.position.z || 0);
        this.prevDeltaZ[i][j] = deltaZ;
        
        // 更新位置
        topFace.position.z = newZ;
        
        // 更新颜色
        this.setBrightnessBasedColor(i, j);
        
        // 更新发光效果
        this.updateGlowEffect(i, j);
      }
    } catch (error) {
      console.error('设置柱体高度时出错:', error);
    }
  }
  
  /**
   * 根据高度设置亮度
   * @param i X坐标
   * @param j Y坐标
   */
  private setBrightnessBasedColor(i: number, j: number): void {
    const topFaceGroup = this.topFaces[i][j];
    if (!topFaceGroup) return;
    
    const height = this.pillarHeights[i][j];
    
    // 如果处于静音状态，使用20%灰色
    if (this.isSilent) {
      // 更新线框颜色 - 线框是第二个子对象
      const topEdge = topFaceGroup.children[1];
      if (topEdge instanceof THREE.Line && topEdge.material instanceof THREE.LineBasicMaterial) {
        topEdge.material.color.setRGB(0.2, 0.2, 0.2); // 20%灰色
      }
      return;
    }
    
    // 计算亮度 - 从20%到100%
    const brightness = 0.2 + Math.min(height * 0.8, 0.8); // 将高度映射到亮度，范围从0.2到1.0
    
    // 更新线框颜色 - 线框是第二个子对象
    const topEdge = topFaceGroup.children[1];
    if (topEdge instanceof THREE.Line && topEdge.material instanceof THREE.LineBasicMaterial) {
      topEdge.material.color.setRGB(brightness, brightness, brightness);
    }
  }
  
  /**
   * 更新光晕效果
   * @param i X坐标
   * @param j Y坐标
   */
  private updateGlowEffect(i: number, j: number): void {
    const glowSprite = this.glowEffects[i][j];
    if (!glowSprite) return;
    
    const height = this.pillarHeights[i][j];
    
    // 只有当高度超过1.0时才显示光晕效果
    if (height > 1.0) {
      glowSprite.visible = true;
      
      // 计算光晕强度 - 超过1.0部分映射到0-1
      const glowIntensity = Math.min(height - 1.0, 1.0);
      
      // 设置光晕大小和不透明度
      const scale = this.gridSize * (1 + glowIntensity);
      glowSprite.scale.set(scale, scale, 1);
      
      // 设置光晕颜色 - 从白色到亮蓝色
      const material = glowSprite.material as THREE.SpriteMaterial;
      material.opacity = glowIntensity * 0.7; // 最大不透明度为0.7
      
      // 根据节拍闪烁
      if (this.beatHistory[this.beatHistory.length - 1] > 0) {
        material.opacity *= 1.5; // 节拍时增强光晕
      }
    } else {
      glowSprite.visible = false;
    }
  }
  
  /**
   * 开始动画
   */
  start(): void {
    if (!this.isInitialized) {
      this.initialize();
    } else if (this.animationId === null) {
      this.animate();
    }
  }
  
  /**
   * 停止动画
   */
  stop(): void {
    if (this.animationId !== null) {
      cancelAnimationFrame(this.animationId);
      this.animationId = null;
    }
  }
  
  /**
   * 清理资源
   */
  dispose(): void {
    try {
      this.stop();
      
      // 清理场景
      this.scene.traverse((object) => {
        if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {
          if (object.geometry) object.geometry.dispose();
          if (object.material) {
            if (Array.isArray(object.material)) {
              object.material.forEach(material => material.dispose());
            } else {
              object.material.dispose();
            }
          }
        }
      });
      
      // 安全移除渲染器DOM元素
      if (this.renderer && this.renderer.domElement) {
        // 检查DOM元素是否确实是容器的子节点
        if (this.container && this.container.contains(this.renderer.domElement)) {
          this.container.removeChild(this.renderer.domElement);
        }
      }
      
      // 释放渲染器资源
      if (this.renderer) {
        this.renderer.dispose();
      }
      
      // 移除事件监听器
      window.removeEventListener('resize', this.onWindowResize.bind(this));
      
      console.log('TopFacePillarEffect资源已清理');
    } catch (error) {
      console.error('清理TopFacePillarEffect资源失败:', error);
    }
  }
  
  /**
   * 窗口大小变化处理
   */
  public onWindowResize(): void {
    try {
      const width = this.container.clientWidth;
      const height = this.container.clientHeight;
      
      this.camera.aspect = width / height;
      this.camera.updateProjectionMatrix();
      
      this.renderer.setSize(width, height);
      this.renderer.render(this.scene, this.camera);
      
      console.log('窗口大小已调整:', width, height);
    } catch (error) {
      console.error('调整窗口大小时出错:', error);
    }
  }
  
  /**
   * 动画循环
   */
  private animate(): void {
    this.animationId = requestAnimationFrame(this.animate.bind(this));
    
    // 缓慢旋转网格
    if (this.grid) {
      this.grid.rotation.z += 0.001;
    }
    
    // 渲染场景
    this.renderer.render(this.scene, this.camera);
  }
  
  /**
   * 更新音频数据
   * @param frequencyData 频率数据
   * @param beatDetected 是否检测到节拍
   */
  updateAudioData(frequencyData: Uint8Array, beatDetected: boolean): void {
    if (!this.isInitialized) return;
    
    try {
      // 检测是否静音
      let totalEnergy = 0;
      for (let i = 0; i < frequencyData.length; i++) {
        totalEnergy += frequencyData[i];
      }
      const averageEnergy = totalEnergy / frequencyData.length;
      
      // 如果平均能量低于阈值，增加静音计数器
      if (averageEnergy < 5) {
        this.silenceTimer++;
      } else {
        this.silenceTimer = 0;
      }
      
      // 如果静音计数器超过阈值，标记为静音状态
      this.isSilent = this.silenceTimer > this.silenceThreshold;
      
      // 计算核心区域的范围 (中心20x20)
      const coreSize = 20;
      const halfCore = coreSize / 2;
      const centerIndex = Math.floor(this.gridDimension / 2);
      const coreStartIndex = centerIndex - halfCore;
      const coreEndIndex = centerIndex + halfCore;
      
      // 更新节拍历史
      this.beatHistory.push(beatDetected ? 1 : 0);
      this.beatHistory.shift();
      
      // 计算频率数据的步长
      const frequencyStep = Math.floor(frequencyData.length / coreSize);
      
      // 首先计算每个Y坐标对应的频率值 (用于中间的第10和11列)
      const yFrequencyValues: number[] = [];
      
      for (let localJ = 0; localJ < coreSize; localJ++) {
        // 计算Y轴上的频率索引
        const frequencyIndex = Math.min(
          Math.floor(localJ * frequencyStep),
          frequencyData.length - 1
        );
        
        // 获取频率值并归一化到0-1范围
        const frequencyValue = frequencyData[frequencyIndex] / 255;
        yFrequencyValues.push(frequencyValue);
      }
      
      // 获取当前时间用于水波动画
      const time = performance.now() * 0.002; // 转换为秒，增加时间因子使动画更快
      
      // 更新核心区域的柱体高度
      for (let i = coreStartIndex; i < coreEndIndex; i++) {
        const localI = i - coreStartIndex;
        
        for (let j = coreStartIndex; j < coreEndIndex; j++) {
          const localJ = j - coreStartIndex;
          let heightValue = 0;
          
          // 中间的第10和11列 (基于0的索引，所以是9和10)
          if (localI === 9 || localI === 10) {
            // 使用Y轴的频率值
            heightValue = yFrequencyValues[localJ];
          } else {
            // 计算与中心列的距离
            const distanceFromCenter = Math.min(Math.abs(localI - 9), Math.abs(localI - 10));
            
            // 获取中心列对应Y位置的高度值作为波源
            const sourceHeight = yFrequencyValues[localJ];
            
            // 根据Y轴位置调整波长 - 低频区波长较长，高频区波长较短
            // 归一化Y轴位置 (0-1)
            const normalizedY = localJ / (coreSize - 1);
            
            // 波长因子 - 根据Y轴位置变化，高频区(顶部)波长更短，低频区(底部)波长更长
            // 范围从1.5(底部)到0.5(顶部)
            const waveLength = 1.5 - normalizedY * 1.0;
            
            // 传播速度因子 - 增加到原来的2倍
            const propagationSpeed = 10.0;
            
            // 衰减因子 - 减小到原来的一半，使波传播更远
            const attenuationFactor = 0.15;
            
            // 计算相位偏移 - 基于距离和时间
            const phaseOffset = distanceFromCenter - time * propagationSpeed;
            
            // 计算衰减系数 - 随距离增加而减小，但衰减更慢
            const attenuation = Math.exp(-attenuationFactor * distanceFromCenter);
            
            // 计算水波高度 - 正弦波 * 衰减 * 源高度
            // 添加一个额外的频率因子，使波动更加动感
            const frequencyFactor = 1.0 + normalizedY * 1.5; // 高频区波动更频繁
            const waveHeight = Math.sin(phaseOffset / waveLength * frequencyFactor) * attenuation * sourceHeight;
            
            // 确保高度为正值，并增强效果
            heightValue = Math.max(0, waveHeight * 1.2);
          }
          
          // 设置柱体高度
          this.setPillarHeight(i, j, heightValue);
        }
      }
      
      // 如果检测到节拍，添加额外的视觉效果
      if (beatDetected) {
        // 可以在这里添加节拍效果，例如闪烁或颜色变化
      }
      
    } catch (error) {
      console.error('更新音频数据时出错:', error);
    }
  }
} 